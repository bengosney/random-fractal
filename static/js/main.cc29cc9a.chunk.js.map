{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","height","width","pointCount","pointSize","drawing","ctx","lastPoint","x","y","points","updateWindowDimensions","bind","assertThisInitialized","_this2","canvas","refs","getContext","rAF","requestAnimationFrame","initScene","updateAnimationState","window","addEventListener","_window","innerWidth","innerHeight","setState","cancelAnimationFrame","removeEventListener","drawScene","nextFrame","_this3","_this$state","clearRect","value","r1","r2","x1","y1","x2","y2","Math","sqrt","_this$state2","radius","min","a","clearFrame","i","angle","cos","PI","sin","drawPixel","r","g","b","push","colour","arguments","length","undefined","_colour$a","fillStyle","concat","fillRect","_this4","_this$state3","forEach","p","selectedPoint","floor","random","_this5","_this$state4","react_default","createElement","className","onClick","ref","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cc29cc9a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\n\nclass point {\n    constructor(x = null, y = null) {\n        this.x = x;\n        this.y = y;\n    }\n}\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            height: 500,\n            width: 150,\n            pointCount: 3,\n            pointSize: 1,\n        };\n\n        this.drawing = false;\n        this.ctx = null;\n        this.lastPoint = {x: 0, y: 0};\n        this.points = [];\n\n        this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n    }\n\n    componentDidMount() {\n        const canvas = this.refs.canvas;\n        this.canvas = canvas;\n        this.ctx = canvas.getContext(\"2d\");\n\n        this.rAF = requestAnimationFrame(() => {\n            this.initScene();\n            this.updateAnimationState();\n        });\n        this.updateWindowDimensions();\n        window.addEventListener(\"resize\", this.updateWindowDimensions);\n    }\n\n    updateWindowDimensions() {\n        const { innerWidth, innerHeight } = window;\n\n        this.setState({ width: innerWidth, height: innerHeight });\n        this.initScene();\n    }\n\n    componentWillUnmount() {\n        cancelAnimationFrame(this.rAF);\n        window.removeEventListener(\"resize\", this.updateWindowDimensions);\n    }\n\n    componentDidUpdate() {\n        this.initScene();\n    }\n\n    updateAnimationState() {\n        this.drawScene();\n        this.drawScene();\n        this.drawScene();\n        this.drawScene();\n        this.drawScene();\n\n        this.nextFrame();\n    }\n\n    nextFrame() {\n        this.rAF = requestAnimationFrame(() => this.updateAnimationState());\n    }\n\n    clearFrame() {\n        const { width, height } = this.state;\n        const { ctx } = this;\n\n        ctx.clearRect(0, 0, width, height);\n    }\n\n    convertRange(value, r1, r2) {\n        return ((value - r1[0]) * (r2[1] - r2[0])) / (r1[1] - r1[0]) + r2[0];\n    }\n\n    distance(x1, y1, x2, y2) {\n        const x = x1 - x2;\n        const y = y1 - y2;\n\n        return Math.sqrt(x * x + y * y);\n    }\n\n    scale(value, r1, r2) {\n        return ((value - r1[0]) * (r2[1] - r2[0])) / (r1[1] - r1[0]) + r2[0];\n    }\n\n    initScene() {\n        const { width, height, pointCount, pointSize } = this.state;\n        const radius = Math.min(height, width) * .4;\n        const a = 360 / pointCount;\n\tconst { ctx } = this;\n\n\tthis.clearFrame();\n\t\n        this.points = [];\n        for (let i = 0; i < pointCount;i++) {\n            const angle = (a * i) + (a / 4);\n            var x = (width / 2) + (radius * Math.cos(angle*Math.PI/180));\n            var y = (height / 2) + (radius * Math.sin(angle*Math.PI/180));\n\n            this.drawPixel(x, y, {r:0,g:255,b:0});\n            this.points.push({x, y});\n\t    this.lastPoint = {x, y};\n        }\n    }\n\n    drawPixel(x, y, colour = {r:255,g:255,b:255,a:255}) {\n        const { pointSize } = this.state;\n        const { ctx } = this;\n        const {r,b,g,a=255} = colour;\n        ctx.fillStyle = `rgba(${r},${g},${b},${a/255})`;\n        ctx.fillRect( x - (pointSize / 2), y - (pointSize / 2), pointSize, pointSize );\n    }\n\n    drawScene() {\n        const { width, height, pointCount, pointSize } = this.state;\n        const { ctx, points, lastPoint } = this;\n\n        points.forEach(p => {\n            this.drawPixel(p.x, p.y, {r:0,g:0,b:255});\n        });\n\n        const selectedPoint = points[Math.floor(Math.random() * points.length)];\n        const x = Math.floor(lastPoint.x + ((selectedPoint.x - lastPoint.x) / 2));\n        const y = Math.floor(lastPoint.y + ((selectedPoint.y - lastPoint.y) / 2));\n\t\n        this.drawPixel(x, y);\n        this.lastPoint = {x,y};\n    }\n\n    render() {\n        const { width, height } = this.state;\n\n        return (\n\t\t<div className={\"grid\"}>\n\t\t  <div className={\"ui\"}>\n\t\t    <p>Has 3 points, randomly picks one and moves half way from the current location to the point and draws a pixel.</p>\n\t\t    <button onClick={() => this.initScene()}>Restart</button>\n\t\t  </div>\n                <div className={\"dots\"}>\n                    <canvas ref=\"canvas\"  width={width} height={height} />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}